.SEGMENT vm1code
.GLOBAL vm1CodeStart
.GLOBAL vm1CodeEnd

vm1CodeStart:

vec_reset: 				JMP vmStartup
vec_segmentViolation: 	JMP vmSegviol
vec_invalidOpcode: 		JMP vmInvalid
vec_divisionByZero: 	JMP vmDivByZero
vec_hypervisorTrap: 	JMP vmHvTrap
vec_timerInterrupt: 	JMP vmTimerInt

JMP hang #INT 0
JMP hang #INT 1
JMP hang #INT 2
JMP hang #INT 3
JMP hang #INT 4
JMP hang #INT 5
JMP hang #INT 6
JMP hang #INT 7
JMP hang #INT 8
JMP hang #INT 9
JMP hang #INT 10
JMP hang #INT 11
JMP hang #INT 12
JMP hang #INT 13
JMP hang #INT 14
JMP hang #INT 15
JMP hang #INT 16
JMP hang #INT 17
JMP hang #INT 18
JMP hang #INT 19
JMP hang #INT 20
JMP hang #INT 21
JMP hang #INT 22
JMP hang #INT 23
JMP hang #INT 24
JMP hang #INT 25

vmSegviol:
vmInvalid:
vmDivByZero:
vmHvTrap:
vmTimerInt:

hang:
	HALT
	JMP hang

vmStartup:
	MOV r30, vm1StackEnd

	MOV r0, vmSayHello
	CALL printString
	HALT

#r0 takes pointer to string to print
printString:
	CMP r0(0), 0
	JZ end_reg
	PRINT r0(0)
	ADD r0, 1
	JMP printString
end_reg:
	RET

vm1CodeEnd:


.SEGMENT vm1data
.GLOBAL vm1DataStart
.GLOBAL vm1DataEnd
vm1DataStart:
vmSayHello:		.string "I am a VM!"
vm1DataEnd:

.SEGMENT vm1Regs
.GLOBAL vm1RegsStart
.GLOBAL vm1RegsEnd
vm1RegsStart:
.alloc 31
vm1RegsEnd:

.SEGMENT vm1Stack
.GLOBAL vm1StackStart
.GLOBAL vm1StackEnd
vm1StackStart:
.alloc 512
vm1StackEnd:
