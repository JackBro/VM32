.SEGMENT code
.privLvl 0
.GLOBAL startup

.define stuff, 0x10000

startup:
	MOV CR_CS, 0
	MOV CR_DS, 1
	MOV CR_ES, 1
	MOV CR_RS, 2
	MOV CR_SS, 3

	MOV CR_STACKPTR, endOfStack

	MOV CR_SEGTBL, segementationTable

	MOV r0, bootStr
	CALL printString

	MOV r0, vmTable
	ADD r0, 9
	MOV r0(5), vm1CodeStart			#Set Entry point for VM
	MOV r0(6), vm1StackEnd			#Set Stackpointer (optional - after bootup SP is undefined)
	MOV CR_VMTBL, vmTable			#After every modification, reload must be triggered
	VMRESUME 1						#Jump into VM 1

end:
	HALT
	JMP end


##########################################

#r0 takes pointer to string to print
printString:
	CMP r0(0), 0
	JZ end_reg
	PRINT r0(0)
	ADD r0, 1
	JMP printString
end_reg:
	RET


codeEnd:

##########################################

.SEGMENT data
startOfData:

bootStr:
	.string "VM32 Hypervisor booting\n"


segementationTable:
#		Start				Limit			Type		PrivLvl
#HV
.word	InterruptVectors,	codeEnd,		0,			0			#Hypervisor CS
.word	startOfData,		endOfData,		1,			0			#Hypervisor DS
.word	startOfRegisters,	endOfRegisters,	2,			0			#Hypervisor RS
.word	startOfStack,		endOfStack,		3,			0			#Hypervisor SS

#VM1
.word	vm1CodeStart,		vm1CodeEnd,		0,			0			#VM1 CS
.word	vm1DataStart,		vm1DataEnd,		1,			0			#VM1 DS
.word	vm1RegsStart,		vm1RegsEnd,		2,			0			#VM1 RS
.word	vm1StackStart,		vm1StackEnd,	3,			0			#VM1 SS

#EOT
.word	0xFFFFFFFF,			0xFFFFFFFF,		0xFFFFFFFF,	0xFFFFFFFF	#END of Table


vmTable:
#		CS			DS			ES			SS			RS			IP			SP			Flags		privLvl
.word	0,			1,			1,			3,			2,			0,			0,			0,			0			#Hypervisor
.word	4,			5,			5,			7,			6,			0,			0,			0,			0			#VM1
.word	0xFFFFFFFF,	0xFFFFFFFF,	0xFFFFFFFF,	0xFFFFFFFF,	0xFFFFFFFF,	0xFFFFFFFF,	0xFFFFFFFF,	0xFFFFFFFF,	0xFFFFFFFF	#EOT

endOfData:

##########################################

.SEGMENT registers
startOfRegisters:
.alloc 31
endOfRegisters:

##########################################

.SEGMENT stack
startOfStack:
.alloc 512
endOfStack:
