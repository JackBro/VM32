.SEGMENT code
.privLvl 0
.GLOBAL startup

startup:
	MOV CR_CS, 0
	MOV CR_DS, 1
	MOV CR_ES, 1
	MOV CR_RS, 2
	MOV CR_SS, 3

	MOV CR_STACKPTR, endOfStack

	MOV CR_SEGTBL, segementationTable

	#JMP endOfStack

	CALL printWithMemory
	CALL printWithRegisters

	INT 0

	MOV r1, 1234
	DIV r1, 0

end:
	HALT
	JMP end


##########################################

printWithMemory:
	MOV (strPtr), sayHello
next_mem:
	CMP [strPtr], 0
	JZ end_mem
	PRINT [strPtr]
	ADD (strPtr), 1
	JMP next_mem
end_mem:
	RET

##########################################

printWithRegisters:
	MOV r0, sayHello
next_reg:
	CMP r0(0), 0
	JZ end_reg
	PRINT r0(0)
	ADD r0, 1
	JMP next_reg
end_reg:
	RET


codeEnd:

##########################################

.SEGMENT data
startOfData:

sayHello:
	.string "Hello, World!\n"

strPtr:
	.alloc 1

#someSymbol:
#	.word 0x100000



segementationTable:
#        Start               Limit           Type      		PrivLvl
#CS
.word    InterruptVectors,   codeEnd,        0,        		0

#DS
.word    startOfData,        endOfData,      1,        		0

#DS
.word    startOfRegisters,   endOfRegisters, 2,        		0

#DS
.word    startOfStack,       endOfStack,     3,				0

#END
.word    0xFFFFFFFF,         0xFFFFFFFF,     0xFFFFFFFF,	0xFFFFFFFF

endOfData:

##########################################

.SEGMENT registers
startOfRegisters:
.alloc 31
endOfRegisters:

##########################################

.SEGMENT stack
startOfStack:
.alloc 512
endOfStack:
