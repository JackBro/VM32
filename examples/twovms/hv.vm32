.SEGMENT code
.privLvl 0
.GLOBAL startup
.GLOBAL hvSegmentViolation
.GLOBAL hvInvalidOpcode
.GLOBAL hvDivisionByZero
.GLOBAL hvTimerInterrupt

.DEFINE TIMERCOMPARE, 50

startup:
	MOV CR_CS, 0
	MOV CR_DS, 1
	MOV CR_ES, 1
	MOV CR_RS, 2
	MOV CR_SS, 3

	MOV CR_SEGTBL, segementationTable
	MOV r30, endOfStack				#set the stack pointer *after* activating a register segment

	PUSH bootStr
	CALL printString
	ADD r30, 1						#remove argument from stack

	#Configure timer and enable interrupts
	MOV CR_COUNTER, 0
	MOV CR_COMPARE, TIMERCOMPARE
	MOV CR_INT, 2 #enable timer

	MOV r0, vmTable
	MOV CR_VMTBL, vmTable			#After every modification, reload must be triggered
	
vmEntry:
	STI
	VMRESUME (currentVM)			#Jump into VM
	CLI

	#If we get here, a trap occured

	POP r10		#get VM ID
	POP r0		#get Trap Reason

	#handle the trap
	CALL r0(hvTrapJumpTable)

	#and spin me right round, baby, right round, like a traphandler baby...
	JMP vmEntry

	#This should not happen as we are only handling traps from now on
end:
	HALT
	JMP end

hvSegmentViolation:
	PRINT 0x42
	HALT

hvInvalidOpcode:
	PRINT 0x43
	HALT

hvDivisionByZero:
	PRINT 0x44
	HALT

hvTimerInterrupt:
	#do round robin scheduling between VMs
	#after RETI, a VMEXIT will happen where we do the actual scheduling based on the new value of currentVM
	ADD (currentVM), 1
	CMP (currentVM), 3
	JNZ out
	MOV (currentVM), 1
out:

	#Reconfigure timer and enable interrupts
	#After that the timer starts running again
	MOV CR_COUNTER, 0
	MOV CR_COMPARE, TIMERCOMPARE
	MOV CR_INT, 2 #enable timer

	RETI

##########################################

hvHandleSegmentViolation:
	PUSH segViolStr
	CALL printString
	ADD r30, 1
	HALT

hvHandleInvalidInstruction:
	PUSH invInstrStr
	CALL printString
	ADD r30, 1
	HALT

handleDivisionByZero:
	PUSH divByZeroStr
	CALL printString
	ADD r30, 1
	HALT

handleHvTrap:
	PUSH vmtrapStr
	CALL printString
	ADD r30, 1
	HALT

hvHandleSoftwareInt:
	PUSH softwareIntStr
	CALL printString
	ADD r30, 1
	HALT

hvHandlePrivilegeViolation:
	PUSH privViolationStr
	CALL printString
	ADD r30, 1
	HALT

hvHandleSpecialRegisterRead:
	PUSH specialRegisterReadStr
	CALL printString
	ADD r30, 1
	HALT

hvHandleSpecialRegisterWrite:
	PUSH specialRegisterWriteStr
	CALL printString
	ADD r30, 1
	HALT

hvHandleHalt:
	PUSH haltStr
	CALL printString
	ADD r30, 1
	HALT

hvHandleHardwareAccess:
	ENTER

	GETARGUMENT r1, 0
	PRINT r1	#print it

	LEAVE
	RETN 1

hvHandleTimerInterrupt:
	#don't do anything here
	RET

hvHandleVmresume:
	PUSH vmresumeStr
	CALL printString
	HALT

##########################################

#first element on stack is pointer to string
printString:
	ENTER
	GETARGUMENT r0, 0
nextChar:
	CMP r0(0), 0
	JZ end_reg
	PRINT r0(0)
	ADD r0, 1
	JMP nextChar
end_reg:
	LEAVE
	RET

printInteger:
	ENTER
	GETARGUMENT r0, 0

	MOV r1, 28
	MOV r2, 0xF0000000
nextNibble:
	MOV r3, numDigits
	MOV r4, r0

	AND r4, r2	#mask nibble
	SHR r4, r1	#shift nibble right

	ADD r3, r4	#get and print char
	PRINT r3(0)

	SHR r2, 4	#move mask to next nibble
	SUB r1, 4	#adjust position

	CMP r1, 28	#End?
	JGE done
	JMP nextNibble
done:
	PRINT 0xa
	LEAVE
	RET

codeEnd:

##########################################

.SEGMENT data
startOfData:

currentVM:
	.word 1

bootStr:
	.string "VM32 Hypervisor booting\n"

segViolStr:
	.string "Segmentation violation\n"
invInstrStr:
	.string "Invalid Instruction\n"
divByZeroStr:
	.string "Divion by zero\n"
vmtrapStr:
	.string "HV Trap in VM\n"
softwareIntStr:
	.string "Software Interrupt\n"
privViolationStr:
	.string "Privilege Violation\n"
specialRegisterReadStr:
	.string "Special Register Read\n"
specialRegisterWriteStr:
	.string "Special Register Write\n"
haltStr:
	.string "VM halted itself\n"
hardwareAccessStr:
	.string "VM attempted hardware access\n"
vmresumeStr:
	.string "VM attempted VMRESUME opcode\n"


numDigits:
	.string "0123456789ABCDEF"

hvTrapJumpTable:
	.word hvHandleSegmentViolation
	.word hvHandleInvalidInstruction
	.word handleDivisionByZero
	.word handleHvTrap
	.word hvHandleSoftwareInt
	.word hvHandlePrivilegeViolation
	.word hvHandleSpecialRegisterRead
	.word hvHandleSpecialRegisterWrite
	.word hvHandleHalt
	.word hvHandleHardwareAccess
	.word hvHandleVmresume
	.word hvHandleTimerInterrupt


segementationTable:
#		Start				Limit			Type		PrivLvl
#HV
.word	InterruptVectors,	codeEnd,		0,			0			#Hypervisor CS
.word	startOfData,		endOfData,		1,			0			#Hypervisor DS
.word	startOfRegisters,	endOfRegisters,	2,			0			#Hypervisor RS
.word	startOfStack,		endOfStack,		3,			0			#Hypervisor SS

#VM1
.word	vm1CodeStart,		vm1CodeEnd,		0,			0			#VM1 CS
.word	vm1DataStart,		vm1DataEnd,		1,			0			#VM1 DS
.word	vm1RegsStart,		vm1RegsEnd,		2,			0			#VM1 RS
.word	vm1StackStart,		vm1StackEnd,	3,			0			#VM1 SS

#VM2
.word	vm2CodeStart,		vm2CodeEnd,		0,			0			#VM2 CS
.word	vm2DataStart,		vm2DataEnd,		1,			0			#VM2 DS
.word	vm2RegsStart,		vm2RegsEnd,		2,			0			#VM2 RS
.word	vm2StackStart,		vm2StackEnd,	3,			0			#VM2 SS

#EOT
.word	0xFFFFFFFF,			0xFFFFFFFF,		0xFFFFFFFF,	0xFFFFFFFF	#END of Table


vmTable:
#		CS			DS			ES			SS			RS			IP				Flags		privLvl
.word	0,			1,			1,			3,			2,			0,				0,			0			#Hypervisor
.word	4,			5,			5,			7,			6,			vm1CodeStart,	0,			0			#VM1
.word	8,			9,			9,			11,			10,			vm2CodeStart,	0,			0			#VM2
.word	0xFFFFFFFF,	0xFFFFFFFF,	0xFFFFFFFF,	0xFFFFFFFF,	0xFFFFFFFF,	0xFFFFFFFF,		0xFFFFFFFF,	0xFFFFFFFF	#EOT

endOfData:

##########################################

.SEGMENT registers
startOfRegisters:
.alloc 31
endOfRegisters:

##########################################

.SEGMENT stack
startOfStack:
.alloc 512
endOfStack:
